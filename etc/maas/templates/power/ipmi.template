# -*- mode: shell-script -*-
#
# Control a system via ipmipower
#

# Parameters.
power_change={{power_change}}
power_address={{power_address}}
power_user={{power_user}}
power_pass={{power_pass}}
power_driver={{power_driver}}
ipmipower={{ipmipower}}
ipmi_chassis_config={{ipmi_chassis_config}}
config={{config_dir}}/{{ipmi_config}}

# Determines the power command needed to execute the desired
# action. This function receives ${power_change} as argument.
formulate_power_command() {
    case $1 in
    'on') echo '--cycle --on-if-off' ;;
    'off') echo '--off' ;;
    *)
        echo "Got unknown power state from ipmipower: '$1'" >&2
        exit 1
    esac
}

# Determines the current state on which the machine finds itself.
# The argument passed comes from IPMI's stat command in the form:
# <ipmi-ip-address>: <on/off>
# This function evaluates whether it was <on/off>.
formulate_power_state() {
    case $2 in
    'on') echo 'on' ;;
    'off') echo 'off' ;;
    *)
        echo "Got unknown power state from ipmipower: '$2'" >&2
        exit 1
    esac
}

# Issue command to ipmipower, for the given system.
issue_ipmi_command() {
    # See https://launchpad.net/bugs/1053391 for details of this workaround
    driver_option=""
    if [ -n "$power_driver" ]
        then
          driver_option="--driver-type=${power_driver}"
    fi

    echo workaround |\
    ${ipmi_chassis_config} ${driver_option} -h ${power_address} -u ${power_user} -p ${power_pass} --commit --filename ${config}
    echo workaround |\
    ${ipmipower} ${driver_option} -h ${power_address} -u ${power_user} -p ${power_pass} "$@"
}

# This script deliberately does not check the current power state
# before issuing the requested power command. See bug 1171418 for an
# explanation.
power_command=$(formulate_power_command ${power_change})
issue_ipmi_command ${power_command}
