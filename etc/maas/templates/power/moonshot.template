# -*- mode: shell-script -*-
#
# Control a system via ipmipower
#

# Parameters.
power_change={{power_change}}
power_hwaddress={{power_hwaddress}}
power_address={{power_address}}
power_user={{power_user}}
power_pass={{power_pass}}
ipmitool={{ipmitool}}

# Determines the power command needed to execute the desired
# action. This function receives ${power_change} as argument.
formulate_power_command() {
    case $1 in
    'on') echo 'on' ;;
    'off') echo 'off' ;;
    *)
        echo "Got unknown power state from ipmipower: '$1'" >&2
        exit 1
    esac
}

# Determines the current state on which the machine finds itself.
# The argument passed comes from IPMI's stat command in the form:
# <ipmi-ip-address>: <on/off>
# This function evaluates whether it was <on/off>.
formulate_power_state() {
    case $4 in
    'on') echo 'on' ;;
    'off') echo 'off' ;;
    *)
        echo "Got unknown power state from ipmipower: '$2'" >&2
        exit 1
    esac
}

# Issue command to ipmipower, for the given system.
issue_ipmitool_command() {
    ${ipmitool} -I lanplus -H ${power_address} -U ${power_user} -P ${power_pass} ${power_hwaddress} power "$@"
}


# Get the given system's power state: 'on' or 'off'.
get_power_state() {
    ipmi_state=$(issue_ipmitool_command status)
    formulate_power_state ${ipmi_state}
}


if [ "$(get_power_state)" != "${power_change}" ]
then
    power_command=$(formulate_power_command ${power_change})
    issue_ipmitool_command ${power_command}
fi
